// regex generated by chatgpt with this conversation
// https://chatgpt.com/share/6764b943-4e30-8011-9e10-334f781b5ff8

// Reflection mappings for pronouns and similar words.
const reflections = {
    "I": "you",
    "me": "you",
    "my": "your",
    "am": "are",
    "you": "I",
    "your": "my",
    "yours": "mine",
    "are": "am"
};

// A dictionary of responses based on various patterns.
const responses = {
    "hello|hi|hey": [
        "Hello! How are you feeling today?",
        "Hi there! What’s on your mind?",
        "Hey! How can I help you?"
    ],
    "how are you|how's it going|what's up": [
        "I'm just a program, but I'm here to help! How are you?",
        "I'm doing well, thank you! How can I assist you?",
        "I'm here and ready to listen. How about you?"
    ],
    "you remind me of (.*)": [
        "Why do you think I remind you of $1?",
        "What makes you think of $1 when talking to me?",
        "Is it a good feeling to be reminded of $1?"
    ],
    "mother|father|family|parent": [
        "Tell me more about your family.",
        "How does that make you feel about your family?",
        "What role does your family play in your thoughts?"
    ],
    "I need(.*)": [
        "Why do you need $1?",
        "Would getting $1 really help you?",
        "What if you didn’t need $1?"
    ],
    "I am(.*)": [
        "Why do you think you are $1?",
        "How long have you felt that way?",
        "What made you feel like $1?"
    ],
    "I feel(.*)": [
        "Why do you feel $1?",
        "Does feeling $1 happen often?",
        "How does that feeling affect you?"
    ],
    "I'm not sure|I don't know": [
        "That’s okay. Can you tell me more about what’s confusing?",
        "It’s alright to feel unsure. Let’s explore it together.",
        "What do you think might help you figure it out?"
    ],
    "I can't(.*)": [
        "What makes you think you can’t $1?",
        "Have you tried $1 before?",
        "What if you could $1? How would that feel?",
        "Sometimes it helps to break $1 into smaller steps. Have you tried that?"
    ],
    "it hurts|I'm in pain|I'm hurt": [
        "I’m sorry to hear that. Can you tell me more?",
        "What kind of pain are you feeling?",
        "How long have you been feeling this way?",
        "Is there anything that helps ease the pain?"
    ],
    "I'm happy|I'm excited|I feel great": [
        "That’s wonderful! What’s making you feel this way?",
        "I’m glad to hear that! Can you share more about it?",
        "That’s great news! What’s been going well for you?"
    ],
    "I'm sad|I'm upset|I'm depressed": [
        "It’s okay to feel sad sometimes. I’m here to listen.",
        "What do you think might help you feel better?"
    ],
    "I think(.*)": [
        "Why do you think $1?",
        "What led you to that thought?",
        "Do you feel confident about thinking $1?",
        "How does thinking $1 affect your feelings?"
    ],
    "thank you|thanks": [
        "You’re welcome! I’m glad I could help.",
        "No problem at all. Let me know if there’s anything else.",
        "Happy to assist. Take care!",
        "It’s my pleasure!"
    ],
    "life|purpose|meaning": [
        "What does life mean to you?",
        "How do you find purpose in life?",
        "What gives your life meaning?",
        "Do you often think about life’s bigger questions?"
    ],
    "sorry|apologies": [
        "No need to apologize.",
        "Apologies aren't necessary. Why do you feel that way?",
        "It’s okay to feel that way."
    ],
    "bye|goodbye|exit": [
        "Goodbye! Take care.",
        "Thank you for sharing. Goodbye!",
        "Bye! I’m here if you need to talk again."
    ],
    //when nothing matches
    "(.*)": [
        "I'm not sure I understand. Can you elaborate?"
    ]
};

//https://www.w3schools.com/js/js_htmldom_eventlistener.asp
document.getElementById("sendBtn").addEventListener("click", communicate);

// Handle Message / send response
function communicate() {

    // recieve the message
    let message = document.getElementById("userInput").value;
    console.log(message);

    // wipe the input field
    document.getElementById("userInput").value = "";

    // add user message to the chat GUI
    // how to add a class in javascript
    // https://www.w3schools.com/howto/howto_js_add_class.asp
    let userMessageBox = document.createElement("div");
    userMessageBox.classList.add("message");
    userMessageBox.classList.add("user");
    userMessageBox.innerHTML = message;

    // respond with eliza logic 
    let response = respond(message);
    console.log("response: " + response);

    // add bot message to the chat GUI
    let botMessageBox = document.createElement("div");
    botMessageBox.classList.add("message");
    botMessageBox.classList.add("bot");
    botMessageBox.innerHTML = response;

    // get the chat box to add divs to
    let messagesContainer = document.getElementById("messages");
    messagesContainer.appendChild(userMessageBox);
    messagesContainer.appendChild(botMessageBox);

}

// Function to reflect responses.
function reflect(text) {
    return text
        .split(" ")
        .map(word => reflections[word.toLowerCase()] || word)
        .join(" ");
}

// Function to select a suitable response based on the user's input.
function respond(userInput) {
    // loop over responses and extract the regex and associated response values
    for (const [pattern, responsesList] of Object.entries(responses)) {
        const regex = new RegExp(pattern, "i");
        const match = userInput.match(regex);

        if (match) {
            // Select a random response from the list.
            let response = responsesList[Math.floor(Math.random() * responsesList.length)];

            // Replace captured groups in the response, reflecting as needed.
            for (let i = 1; i < match.length; i++) {
                response = response.replace(`$${i}`, reflect(match[i]));
            }

            return response;
        }
    }

    // Default response if no patterns match.
    return "I'm not sure I understand. Can you elaborate?";
}